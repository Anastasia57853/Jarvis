name: C

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'example/**'
      - 'src/**'
      - 'node/**'
      - 'CMakeLists.txt'
      - '.github/workflows/c.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'example/**'
      - 'src/**'
      - 'node/**'
      - 'CMakeLists.txt'
      - '.github/workflows/c.yml'

jobs:
  build-github-hosted:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: ubuntu-latest
            pv-platform: linux
            output-dir: linux/x86_64
          - os: windows-latest
            pv-platform: windows
            output-dir: windows/amd64
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Create build directory
      run: cmake -B ./build -S . -DPV_PLATFORM="${{ matrix.pv-platform }}" -DOUTPUT_DIR="${{ matrix.output-dir }}"

    - name: Build
      run: cmake --build ./build

    - name: Run get audio devices
      run: ./demo --show_audio_devices
      working-directory: build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.os }}
        path: |
          lib/${{matrix.output-dir}}/libpv_recorder.*
          lib/node/${{matrix.output-dir}}/pv_recorder.node
        retention-days: 3

#  build-self-hosted-macos:
#    runs-on: pv-ios
#
#    strategy:
#      matrix:
#        arch: [arm64, x86_64]
#
#    steps:
#    - uses: actions/checkout@v3
#      with:
#        submodules: recursive
#
#    - name: Create build directory
#      run: cmake -B ./build-${{ matrix.arch }} -DCMAKE_OSX_ARCHITECTURES=${{ matrix.arch }}
#
#    - name: Build
#      run: cmake --build ./build-${{ matrix.arch }}
#
#    - name: Run get audio devices
#      run: ./demo --show_audio_devices
#      working-directory: build-${{ matrix.arch }}
#
#    - name: Upload build artifacts
#      uses: actions/upload-artifact@v3
#      with:
#        name: macos-${{ matrix.arch }}
#        path: |
#          build-${{ matrix.arch }}/libpv_recorder.dylib
#          build-${{ matrix.arch }}/node/pv_recorder.node
#        retention-days: 3
#
#  build-self-hosted:
#    runs-on: ${{ matrix.machine }}
#
#    strategy:
#      matrix:
#        machine: [rpi4-64, jetson]
#
#    steps:
#    - uses: actions/checkout@v3
#      with:
#        submodules: recursive
#
#    - name: Create build directory
#      run: cmake -B ./build
#
#    - name: Build
#      run: cmake --build ./build
#
#    - name: Run get audio devices
#      run: ./demo --show_audio_devices
#      working-directory: build
#
#    - name: Upload build artifacts
#      uses: actions/upload-artifact@v3
#      with:
#        name: ${{ matrix.machine }}
#        path: |
#          build/libpv_recorder.*
#          !build/libpv_recorder.*.*
#          build/node/pv_recorder.node
#        retention-days: 3

  collect-artifacts:
    runs-on: ubuntu-latest
    needs: [build-github-hosted]
#    strategy:
#      matrix:
#        machine: [ubuntu-latest, windows-latest]
#        include:
#          - machine: ubuntu-latest
#            output-dir: linux/x86_64
#          - machine: windows-latest
#            output-dir: windows/amd64
#          - machine: macos-arm64
#            output-dir: mac/arm64
#          - machine: macos-x86_64
#            output-dir: mac/x86_64
#          - machine: rpi2
#            output-dir: raspberry-pi/cortex-a7
#          - machine: rpi3-32
#            output-dir: raspberry-pi/cortex-a53
#          - machine: rpi3-64
#            output-dir: raspberry-pi/cortex-a53-aarch64
#          - machine: rpi4-32
#            output-dir: raspberry-pi/cortex-a72
#          - machine: rpi4-64
#            output-dir: raspberry-pi/cortex-a72-aarch64
#          - machine: jetson
#            output-dir: jetson/cortex-a57-aarch64
#          - machine: beaglebone
#            output-dir: beaglebone

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Make collection directory
        run: mkdir lib

      - name: Collect artifacts
        shell: bash
        run: |
          for DIR in artifacts/*; do cp -a $DIR/* lib/; done

      - name: Upload all artifacts
        uses: actions/upload-artifact@v3
        with:
          name: pvrecorder
          path: lib
          retention-days: 3